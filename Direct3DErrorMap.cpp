#include "Direct3DErrorMap.h"

#include <d3d9.h>

#define REGISTER_CODE(code) {code, #code}

std::unordered_map<HRESULT, std::string>  Direct3DErrorMap::map
({
    REGISTER_CODE(D3D10_ERROR_FILE_NOT_FOUND),
    REGISTER_CODE(D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS),
    REGISTER_CODE(D3D11_ERROR_FILE_NOT_FOUND),
    REGISTER_CODE(D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS),
    REGISTER_CODE(D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS),
    REGISTER_CODE(D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD),
    REGISTER_CODE(D3D12_ERROR_ADAPTER_NOT_FOUND),
    REGISTER_CODE(D3D12_ERROR_DRIVER_VERSION_MISMATCH),
    REGISTER_CODE(DXGI_ERROR_INVALID_CALL),
    REGISTER_CODE(DXGI_ERROR_WAS_STILL_DRAWING),
    REGISTER_CODE(D3DERR_INVALIDCALL),
    REGISTER_CODE(D3DERR_WASSTILLDRAWING),
    REGISTER_CODE(E_FAIL),
    REGISTER_CODE(E_INVALIDARG),
    REGISTER_CODE(E_OUTOFMEMORY),
    REGISTER_CODE(E_NOTIMPL),
    REGISTER_CODE(S_FALSE),
    REGISTER_CODE(S_OK)
});

std::string Direct3DErrorMap::GetErrorString(HRESULT hr)
{
    const auto it = map.find(hr);
    if (it != map.end())
        return it->second;
    else
        return "Unindentified error code";
}
